// Generated by CoffeeScript 1.10.0
(function() {
  var $, _, algebra, component, katex, render, safeParse;

  $ = require('jquery');

  _ = require('underscore');

  katex = require('katex');

  algebra = require('./index');

  component = function(name, values) {
    var key, results, template, value;
    if (values == null) {
      values = {};
    }
    template = $("template#" + name).contents().clone();
    results = [];
    for (key in values) {
      value = values[key];
      results.push(template.find("." + name + "-" + key).textContent(value));
    }
    return results;
  };

  render = function(el, input) {
    var latex, text;
    text = $(el).text();
    if (input == null) {
      input = algebra.parse(text);
    }
    if (!input) {
      return;
    }
    $(el).data('math', text);
    latex = algebra.toLaTeX(input);
    return katex.render(latex, el);
  };

  safeParse = function(input) {
    var error;
    try {
      return algebra.parse(input);
    } catch (error) {
      return null;
    }
  };

  $(document).ready(function() {
    var question;
    question = algebra.parse($('table .expression').first().text());
    $('table .expression').each(function(i, el) {
      return render(el);
    });
    $('input').keyup(function() {
      var answer, el;
      answer = safeParse($('input').val());
      if (!answer) {
        return;
      }
      el = $('tr').last().find('td').get(0);
      return render(el, answer);
    });
    $('input').change(function() {
      var answer, box, expression;
      box = $('tr').last();
      expression = box.find('td.expression');
      answer = safeParse($('input').val());
      if (!answer) {
        return;
      }
      if (!algebra.test(question, answer)) {
        box.addClass('mistake');
      }
      return $('table').append(component('expression'));
    });
    return $('a').click(function(e) {
      e.preventDefault();
      return $('.mistake').show();
    });
  });

}).call(this);
